{"version":3,"sources":["Cell.js","Board.js","App.js","index.js"],"names":["cell","props","litStyle","isLit","className","onClick","clicked","indexRow","indexCol","Board","state","hasWon","cellsLit","createBoard","flippCellsAround","indexRowClicked","indexColClicked","maxRows","nbrRows","maxColumns","nbrColumns","cellsAreLit","flippCell","isWon","every","row","setState","board","i","this","j","push","Math","random","chanceToBeLit","finalBoard","Component","defaultProps","App","ReactDOM","render","document","getElementById"],"mappings":"sRAmBeA,G,MAfH,SAACC,GAEX,IAAMC,EAAS,QAAUD,EAAME,MAAQ,YAAc,IAMrD,OACM,oBAAIC,UAAWF,EAAUG,QALZ,WACjBJ,EAAMK,QAAQL,EAAMM,SAASN,EAAMO,eCLjCC,G,kNAQJC,MAAM,CACJC,QAAO,EACPC,SAAS,EAAKC,e,EAmBhBC,iBAAiB,SAACC,EAAgBC,GAEhC,IAAIC,EAAQ,EAAKhB,MAAMiB,QACnBC,EAAW,EAAKlB,MAAMmB,WACtBC,EAAY,YAAI,EAAKX,MAAME,UAE/B,SAASU,EAAUf,EAASC,GACvBD,GAAU,GAAKA,EAASU,GAAWT,GAAU,GAAKA,EAASW,IAC5DE,EAAYd,GAAUC,IAAWa,EAAYd,GAAUC,IAI3Dc,EAAUP,EAAgBC,GAC1BM,EAAUP,EAAgB,EAAEC,GAC5BM,EAAUP,EAAgB,EAAEC,GAC5BM,EAAUP,EAAgBC,EAAgB,GAC1CM,EAAUP,EAAgBC,EAAgB,GAC1C,IAAIO,EAAMF,EAAYG,OAAM,SAAAC,GAAG,OAAEA,EAAID,OAAM,SAAAxB,GAAI,OAAGA,QAClD,EAAK0B,SAAS,CACZf,OAAOY,EACPX,SAASS,K,4DAjCT,IAFF,IAAIM,EAAQ,GAEFC,EAAE,EAAGA,EAAEC,KAAK5B,MAAMiB,QAASU,IAAI,CAGrC,IAFA,IAAIH,EAAI,GAEAK,EAAE,EAAGA,EAAED,KAAK5B,MAAMmB,WAAYU,IAClCL,EAAIM,KAAKC,KAAKC,SAAWJ,KAAK5B,MAAMiC,eAExCP,EAAMI,KAAKN,GAGf,OAAOE,I,+BAkCP,GAAGE,KAAKnB,MAAMC,OACZ,OACM,sBAAKP,UAAU,SAAf,UACI,qBAAKA,UAAU,cAAf,iBACA,qBAAKA,UAAU,YAAf,sBAMV,IAFF,IAAI+B,EAAW,GAELP,EAAE,EAAEA,EAAEC,KAAK5B,MAAMiB,QAAQU,IAAI,CAEnC,IADA,IAAIH,EAAI,GACAK,EAAE,EAAEA,EAAED,KAAK5B,MAAMmB,WAAWU,IAClCL,EAAIM,KACF,cAAC,EAAD,CAEE5B,MAAO0B,KAAKnB,MAAME,SAASgB,GAAGE,GAC9BhB,iBAAkBe,KAClBtB,SAAUqB,EACVpB,SAAUsB,EACVxB,QAASuB,KAAKf,iBACdI,QAASW,KAAK5B,MAAMiB,SANfU,EAAE,IAAIE,IAUjBK,EAAWJ,KAAK,6BAAaN,GAAJG,IAE7B,OACE,sBAAKxB,UAAU,YAAf,UACE,sBAAKA,UAAU,cAAf,UACI,qBAAKA,UAAU,cAAf,oBACA,qBAAKA,UAAU,YAAf,oBAGJ,uBAAOA,UAAU,QAAjB,SACI,gCACG+B,a,GA/FKC,cAAd3B,EAEG4B,aAAe,CACpBnB,QAAQ,EACRE,WAAW,EACXc,cAAc,KAqGHzB,QC/FA6B,G,6KARX,OACE,qBAAKlC,UAAU,MAAf,SACE,cAAC,EAAD,U,GAJUgC,cCClBG,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.4dfbd480.chunk.js","sourcesContent":["import React from 'react'\nimport \"./Cell.css\"\n\n\nconst cell =(props)=> {\n  \n  const litStyle=\"Cell\" + (props.isLit ? \" Cell-lit\" : \"\");\n  \n  let clickHandler = ()=>{\n    props.clicked(props.indexRow,props.indexCol);\n  }\n\n  return (\n        <td className={litStyle} onClick={clickHandler} />\n  )\n  \n}\n\n\nexport default cell;","import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\nclass Board extends Component {\n\n  static defaultProps = {\n    nbrRows:5,\n    nbrColumns:5,\n    chanceToBeLit:0.25\n  }\n\n  state={\n    hasWon:false,\n    cellsLit:this.createBoard()\n  }\n  \n  createBoard(){\n    let board = [];\n    \n      for(let i=0; i<this.props.nbrRows; i++){\n        let row=[];\n        \n        for(let j=0; j<this.props.nbrColumns; j++)\n            row.push(Math.random() < this.props.chanceToBeLit);\n        \n        board.push(row);\n      }\n    \n    return board\n  }\n\n\n  flippCellsAround=(indexRowClicked,indexColClicked)=>{\n    \n    let maxRows=this.props.nbrRows;\n    let maxColumns=this.props.nbrColumns;  \n    let cellsAreLit=[...this.state.cellsLit];\n    \n    function flippCell(indexRow,indexCol){\n      if(indexRow>=0 && indexRow<maxRows && indexCol>=0 && indexCol<maxColumns){\n        cellsAreLit[indexRow][indexCol]=!cellsAreLit[indexRow][indexCol];\n      } \n    }\n      \n    flippCell(indexRowClicked,indexColClicked);\n    flippCell(indexRowClicked+1,indexColClicked);\n    flippCell(indexRowClicked-1,indexColClicked);\n    flippCell(indexRowClicked,indexColClicked+1);\n    flippCell(indexRowClicked,indexColClicked-1);\n    let isWon=cellsAreLit.every(row=>row.every(cell=>!cell));\n    this.setState({\n      hasWon:isWon,\n      cellsLit:cellsAreLit\n    })\n  \n  }\n\n  \n \n\n  render() {\n\n    if(this.state.hasWon){\n      return(\n            <div className=\"winner\">\n                <div className=\"neon-orange\">YOU</div>\n                <div className=\"neon-blue\">WON !</div>\n            </div>\n      )\n    }\n    let finalBoard=[];\n\n      for(let i=0;i<this.props.nbrRows;i++){\n        let row=[];\n        for(let j=0;j<this.props.nbrColumns;j++){\n          row.push(\n            <Cell\n              key={i+\"-\"+j} \n              isLit={this.state.cellsLit[i][j]}\n              flippCellsAround={this}\n              indexRow={i}\n              indexCol={j}\n              clicked={this.flippCellsAround}\n              nbrRows={this.props.nbrRows}\n            />\n          )\n        }\n        finalBoard.push(<tr key={i}>{row}</tr>);\n      }\n    return(\n      <div className=\"container\">\n        <div className=\"Board-Title\">\n            <div className=\"neon-orange\">Lights</div>\n            <div className=\"neon-blue\">Out</div>\n        </div>\n \n        <table className=\"Board\">\n            <tbody>\n              {finalBoard}\n            </tbody>\n        </table>\n      </div>\n \n    )\n    \n  }\n}\n\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n"],"sourceRoot":""}